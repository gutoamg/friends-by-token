import Head from 'next/head'
import { useContext, useEffect, useRef } from 'react'
import styles from '../../styles/Home.module.scss'
import Background from '../components/Background.'
import EmailIntro from '../components/EmailIntro'
import FirstPage from '../components/FirstPage'
import Gallery from '../components/Gallery'
import { ScrollContext } from '../contexts/ScrollContext';


// Optimized global event listener functionality
const useEventListener = (eventName, eventCallback) => {
    const callbackRef = useRef(eventCallback);
    useEffect(() => {
        callbackRef.current = eventCallback; // updating callback internally if it changes
    });
    useEffect(() => {
        const updatedCallback = (e) => callbackRef.current(e); // Returns updated callback version
        window.addEventListener(eventName, updatedCallback);
        return () => window.removeEventListener(eventName, updatedCallback);
    }, [eventName]);
}



export default function Home() {
	let { setPageHeight, setPageWidth, setPercentageScrolled } = useContext(ScrollContext);
	const pageRef = useRef(0);
	const refToPageHeight = useRef(0);


	useEventListener("scroll", (e) => {
		console.log("SCROL ----");
		const newPercentageScrolled = window.scrollY / (refToPageHeight.current - window.innerHeight);
		console.log(newPercentageScrolled, window.scrollY, refToPageHeight.current, window.innerHeight);
		setPercentageScrolled(newPercentageScrolled);
	});
	// useEffect(() => {
    //     return () => window.removeEventListener("scroll", scrollMethod);
    // }, []);



	useEffect(() => {
		setPageHeight(pageRef.current.offsetHeight);
		refToPageHeight.current = pageRef.current.offsetHeight;
		setPageWidth(pageRef.current.offsetWidth);
	}, []);

	useEffect(() => {
		const resizeMethod = () => {
			setPageHeight(pageRef.current.offsetHeight);
			refToPageHeight.current = pageRef.current.offsetHeight;
			setPageWidth(pageRef.current.offsetWidth);
		}
		window.addEventListener('resize', resizeMethod);
		return () => window.removeEventListener('resize', resizeMethod);
	}, [setPageHeight, setPageWidth]);


	return (
		<div className={styles.container}>
			<Head>
				<title>Friends-by-T0ken</title>
				<meta name="description" content="Generated by create next app" />
				<meta name="viewport" content="width=device-width, initial-scale=1.0" />
				<meta
					name="description"
					content={'A new way of making friends, through NFTs. Our culture is changing and so the ways we make create connections'}
				/>

            {/* Twitter */}
				<meta name="twitter:card" content='A new way of making friends, through NFTs. Our culture is changing and so the ways we make create connections' key="twcard" />
				<meta name="twitter:creator" content={'Augusto M. Gouveia'} key="twhandle" />

            {/* Open Graph */}
				<meta property="og:url" content={'https://friends-by-token.vercel.app/'} key="ogurl" />
				<meta property="og:image" content='https://friends-by-token.vercel.app/intro-screenshot.png' key="ogimage" />
				<meta property="og:site_name" content={'Friends-by-T0ken'} key="ogsitename" />
				<meta property="og:title" content={"Friends-by-T0ken"} key="ogtitle" />
				<meta property="og:description" content={'A new way of making friends, through NFTs. Our culture is changing and so the ways we make create connections'} key="ogdesc" />


            {/* Favicons */}
				<link rel="icon" type="image/png" href="/friends-by-token-icon.png" />
				<meta name="theme-color" content="rgb(0,0,0)" />
			</Head>

			<Background />
			<main className={styles.main} ref={pageRef}>
				<FirstPage />
				{/* <Gallery /> */}
				<EmailIntro />
			</main>
		</div>
	)
}

{/* <footer className={styles.footer}>
	<a
		href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
		target="_blank"
		rel="noopener noreferrer"
	>
		Powered by{' '}
		<span className={styles.logo}>
			<Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
		</span>
	</a>
</footer> */}
